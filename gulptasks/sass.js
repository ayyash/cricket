var gulp = require('gulp');
var sass = require('gulp-sass');
var cssmin = require('gulp-cssmin');
var concat = require('gulp-concat');
var rename = require('gulp-rename');
var autoprefixer = require('gulp-autoprefixer');
var sassUnicode = require('gulp-sass-unicode');
var inject = require('gulp-inject');
var del = require('del');

var gulpConfig = require(__dirname + '/config.json');
// watching mockup
gulp.task('default', ['rawsass', 'rawscripts'], function () {
    // Watch .sass files
    gulp.watch([gulpConfig.srcUrl + 'scss/*.scss'], ['rawsass']);
    gulp.watch([gulpConfig.srcUrl + 'js/*.js'], ['rawscripts']);

});

gulp.task('clean', function () {
    return del('wwwroot', { force: true });
});

gulp.task('rawsass', function () {
    // get imports, inject all ui files, then sass it

    return gulp.src(gulpConfig.srcUrl + 'scss/bs.import.scss')
        .pipe(
        inject(
            gulp.src(gulpConfig.srcUrl + 'scss/ui.*.scss', { read: false }),
            { starttag: '// inject:uisass', endtag: '// endinject', relative: true }
        )
        )
        .pipe(
        inject(
            gulp.src(gulpConfig.srcUrl + 'scss/media.*.scss', { read: false }),
            { starttag: '// inject:mediasass', endtag: '// endinject', relative: true }
        )
        )
        .pipe(concat('all.scss', { newLine: '' }))
        .pipe(gulp.dest(gulpConfig.srcUrl + 'scss/'))
        .pipe(sass({
            includePaths: [gulpConfig.bootstrapUrl]
        }).on('error', sass.logError))
        // autoprefix
        .pipe(autoprefixer({
            browsers: gulpConfig.browserslist
        }))
        .pipe(sassUnicode())
        .pipe(rename({ basename: gulpConfig.projectName }))
        .pipe(gulp.dest(gulpConfig.stageUrl + 'assets/css/'))
        .on('error', console.error.bind(console));



});


gulp.task('rawscripts', function () {

    return gulp.src([gulpConfig.srcUrl + 'js/sm.*.js', gulpConfig.srcUrl + 'js/ui.*.js'])
        .pipe(concat(gulpConfig.projectName + '.js'))
        .pipe(gulp.dest(gulpConfig.stageUrl + 'assets/js/'))
        .on('error', console.error.bind(console));
});


// generate icons from styles generated by icomoons

var liIconStr = "";
gulp.task('cssicons', function () {

    var returnStr = "";
    // different str

    return gulp.src(gulpConfig.srcUrl + 'scss/bs.icons.scss')
        .pipe(inject(
            gulp.src(gulpConfig.srcUrl + 'dummy/variables.scss'),
            {
                starttag: '// inject:icons', endtag: '// endinject',
                transform: function (filePath, file) {
                    //for every $icon-name generate  $icon-name: "value";	@include generateIcon(icon-name,$icon-name);
                    var lines = file.contents.toString('utf8').split('\n');
                    lines.forEach(function (value) {
                        if (value.indexOf('$icon-') > -1) {
                            // add to the line ;
                            // change line to include quotes
                            let name = value.split(":")[0];
                            let v = value.split(":")[1].trim().substr(1, 5); // change to 1 to exclude quotes, damn you icomoon

                            value = `${name}:'${v}'; @include generateIcon(${name.substring(1)},${name});\r\n`;
                            console.log(value);
                            returnStr += value;

                            liIconStr += '<li class="list-group-item col-3"><span class="icon {0}">{1}</span></li>'
                                .replace("{0}", name.substring(1))
                                .replace("{1}", name);
                        }
                    })
                    return returnStr;
                }
            }
        ))
        .pipe(gulp.dest(gulpConfig.srcUrl + 'scss/'));



});
gulp.task('iconset', ['cssicons'], function () {

    return gulp.src(gulpConfig.srcUrl + 'dummy/iconset.html')
        .pipe(inject(
            gulp.src(gulpConfig.srcUrl + 'dummy/variables.scss', { read: false }),
            {
                starttag: '<!-- inject:icons -->', endtag: '<!-- endinject -->',
                transform: function (filePath, file) {
                    //just inject text as is
                    return liIconStr;
                }
            }
        ))
        .pipe(gulp.dest(gulpConfig.srcUrl + 'dummy/'));
});

// TODO: take dummy/fonts into src/assets/fonts
